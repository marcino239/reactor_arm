<launch>
    <!-- debug capability -->
    <arg name="debug" default="false" />
    <arg unless="$(arg debug)" name="launch_prefix" value="" />
    <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />
    
	<param name="robot_description" textfile="$(find reactor_description)/robots/reactor_description.URDF" />

    <node name="dynamixel_manager" pkg="dynamixel_hardware_interface" type="controller_manager" output="screen"
        launch-prefix="$(arg launch_prefix)">
        <rosparam>
            namespace: dxl_manager
            serial_ports:
                port_ttl:
                    port_name: "/dev/ttyUSB0"
                    baud_rate: 1000000
                    min_motor_id: 1
                    max_motor_id: 8
                    update_rate: 20
        </rosparam>
    </node>

	<rosparam file="$(find reactor_controller)/config/controllers.yaml" command="load" />
    <node name="reactor_controller" pkg="dynamixel_hardware_interface" type="controller_spawner.py"
          args="--manager=dxl_manager
              --port=port_ttl
              shoulder_yaw_controller
              shoulder_pitch_controller
              elbow_pitch_controller
              wrist_pitch_controller
              wrist_roll_controller"
              output="screen"/>

    <rosparam file="$(find reactor_controller)/config/reactor_trajectory_controller.yaml" command="load" />          
    <node name="reactor_action_controller_spawner" pkg="dynamixel_hardware_interface" type="controller_spawner.py"
          args="--manager=dxl_manager
              reactor_joint_trajectory_action_controller"
              output="screen"/>
        
              
  <!-- send fake joint values -->
  <!-- node name="joint_state_publisher" pkg="reactor_controller" type="joint_state_publisher">
    <param name="use_gui" value="True"/>
  </node-->
  
</launch>
